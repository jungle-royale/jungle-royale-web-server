name: Build, Push Docker Image, and Deploy

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      # 3) Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # 4) 애플리케이션 빌드 (테스트 제외)
      - name: Build JAR file
        run: ./gradlew build -x test

      # 5) AWS Credentials 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 6) AWS ECR 로그인
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # 7) Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          docker build -t jungle-royale/web-server .
          docker tag jungle-royale/web-server:latest 014188558656.dkr.ecr.ap-northeast-2.amazonaws.com/jungle-royale/web-server:latest
          docker push 014188558656.dkr.ecr.ap-northeast-2.amazonaws.com/jungle-royale/web-server:latest
      # 8) PEM 파일 저장
      - name: Save PEM file
        run: echo "${{ secrets.PEM_FILE }}" > ~/my-key.pem

      # 9) EC2로 배포
      - name: Deploy to EC2
        run: |
          chmod 600 ~/my-key.pem
          scp -o StrictHostKeyChecking=no -i ~/my-key.pem server.sh ec2-user@${{ secrets.EC2_HOST }}:~/
          ssh -o StrictHostKeyChecking=no -i ~/my-key.pem ec2-user@${{ secrets.EC2_HOST }} "bash ~/server.sh"
